dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
dbhandle
res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
?RODBC
res <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
res
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
sap_plant_summary
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
sap_plant_summary
library(forecast)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
View(res)
View(res)
library(forecast)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
summarize(sap_invoice_summary)
sap_invoice_summary
summarize(sap_invoice_summary)
install.packages('sqllite')
summary(sap_invoice_summary)
summarise(sap_invoice_summary)
summary(sap_invoice_summary)
plot(sap_invoice_summary)
auto.arima(sap_invoice_summary)
sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary' group by datemonth, weborderflag)
sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summarygroup by datemonth, weborderflag')
sap_invoice_summary
sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary group by datemonth, weborderflag')
sap_invoice_summary
auto.arima(sap_invoice_summary)
sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary group by datemonth, weborderflag order by datemonth, weborderflag')
sap_invoice_summary
sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary group by datemonth, weborderflag order by datemonth, weborderflag')
R
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
1
2
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
ggplot (sap_invoicesummary, aes(datemonth, fill=weborderflag)) + geom_bar()
library(ggplot2)
ggplot (sap_invoicesummary, aes(datemonth, fill=weborderflag)) + geom_bar()
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
View(sap_invoice_summary)
aggregate(revenue ~ datemonth + weborderflag, data=sap_invoice_summary, FUN=sum)
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
ggplot (sap_invoice_summary, aes(datemonth, fill=revenue)) + geom_bar()
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
?ggplot
ggplot (sap_invoice_summary, aes(datemonth, sum(totalrevenue), fill=weborderflag)) + geom_bar()
View(sap_invoice_summary)
ggplot (sap_invoice_summary, aes(datemonth, sum(revenue), fill=weborderflag)) + geom_bar()
ggplot (sap_invoice_summary, aes(datemonth, sum(revenue))) + geom_bar()
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
library(forecast)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
##sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary group by datemonth, weborderflag order by datemonth, weborderflag')
aggregate(revenue ~ datemonth + weborderflag, data=sap_invoice_summary, FUN=sum)
library(ggplot2)
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
library(forecast)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
aggregate(revenue ~ datemonth + weborderflag, data=sap_invoice_summary, FUN=sum)
library(ggplot2)
ggplot (sap_invoice_summary, aes(datemonth, fill=weborderflag)) + geom_bar()
aggregate(totalrev ~ Datemonth + weborderflag, data=sap_invoice_summary, FUN=sum)
library(ggplot2)
ggplot (sap_invoice_summary, aes(Datemonth, fill=weborderflag)) + geom_bar()
install.packages('randomForest')
library(randomForest)
data(sap_invoice_summary)
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
data(sap_invoice_summary)
rf1<- randomForest(weborderflag, sap_invoice_summary, ntree=50, norm.votes = FALSE)
library(forecast)
library(RODBC)
library(randomForest)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=agiecomsql1;database=DW;trusted_connection=true')
sap_invoice_summary <- sqlQuery(dbhandle, 'select * from sap_invoice_summary')
sap_plant_summary <- sqlQuery(dbhandle, 'select * from sap_plant_summary')
##sap_invoice_summary <- sqlQuery(dbhandle, 'select datemonth, weborderflag, sum(totalrev) as revenue from sap_invoice_summary group by datemonth, weborderflag order by datemonth, weborderflag')
aggregate(totalrev ~ Datemonth + weborderflag, data=sap_invoice_summary, FUN=sum)
library(ggplot2)
ggplot (sap_invoice_summary, aes(Datemonth, fill=weborderflag)) + geom_bar()
aggregate(totalrev ~ DateMonth + weborderflag, data=sap_invoice_summary, FUN=sum)
library(ggplot2)
ggplot (sap_invoice_summary, aes(DateMonth, fill=weborderflag)) + geom_bar()
library(shiny)
library(DBI)
library(pool)
install.packages('shiny')
install.packages('pool')
install.packages('DBI')
install.packages("DBI")
install.packages('DBI')
install.packages('pool')
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
ui <- fluidPage(
textInput("ID", "Enter your ID:", "5"),
tableOutput("tbl"),
numericInput("nrows", "How many cities to show?", 10),
plotOutput("popPlot")
)
server <- function(input, output, session) {
output$tbl <- renderTable({
src_pool(pool) %>% tbl("City") %>%
filter(ID == input$ID)
})
output$popPlot <- renderPlot({
df <- src_pool(pool) %>% tbl("City") %>%
head(as.integer(input$nrows)[1])
pop <- df$Population
names(pop) <- df$Name
barplot(pop)
})
}
shinyApp(ui, server)
setwd("D:/Google Drive/Course/ExploratoryDataAnalysis")
getwd
getwd()
dir()
source("mycode.r")
ls()
ls()
second(4)
source("mycode.r")
second(4)
second(4)
second(4)
second(4:10)
ls()
View(sap_invoice_summary)
View(sap_invoice_summary)
View(sap_invoice_summary)
View(sap_plant_summary)
source("mycode.r")
ls()
clean
clear
library(datasets)
data(cars)
with(cars, plot(speed, dist))
clean
clear
wipe
install.package('xyplot')
install.packages('xyplot')
library(lattice)
state <- data.fram(state.x77, region = state.region)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
gglot2
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(ggplot2)
data("mpg")
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor (Month))
boxplot(Ozone ~ Month, airquality, xlap = "Month", ylab, "Ozone (ppb)")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab, "Ozone (ppb)")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab= "Ozone (ppb)")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", ))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind)
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow(c(1, 2))
f
par(mfrow=c(1, 2))
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")})
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")})
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma(0,0,2,0)
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
model1 <- lm(Ozone ~ Wind)
model1 <- lm(Ozone ~ Wind, airquality)
model2 <- lm(Ozone ~ Solar.R, airquality)
model3 <- lm(Ozone ~ Temp, airquality)
abline(model1, lwd = 2)
abline(model2, lwd = 2)
abline(model3, lwd = 2)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
model1 <- lm(Ozone ~ Wind, airquality)
abline(model1, lwd = 2)
model2 <- lm(Ozone ~ Solar.R, airquality)
abline(model2, lwd = 2)
model3 <- lm(Ozone ~ Temp, airquality)
abline(model3, lwd = 2)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
model1 <- lm(Ozone ~ Wind, airquality)
abline(model1, lwd = 1)
model2 <- lm(Ozone ~ Solar.R, airquality)
abline(model2, lwd = 2)
model3 <- lm(Ozone ~ Temp, airquality)
abline(model3, lwd = 2)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
model1 <- lm(Ozone ~ Wind, airquality)
abline(model1, lwd = 1)
model2 <- lm(Ozone ~ Solar.R, airquality)
abline(model2, lwd = 2)
model3 <- lm(Ozone ~ Temp, airquality)
abline(model3, lwd = 2)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
model1 <- lm(Ozone ~ Wind, airquality)
abline(model1, lwd = 2)
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
model2 <- lm(Ozone ~ Solar.R, airquality)
abline(model2, lwd = 2)
plot(Temp, Ozone, main = "Ozone and Temperature")
model3 <- lm(Ozone ~ Temp, airquality)
abline(model3, lwd = 2)
mtext("Ozone and Weather in New York City", outer = TRUE)
})
x< rnorm(100)
hist (x)
y<- rnorm(100)
plot(x, y)
x<- rnorm(100)
hist (x)
y<- rnorm(100)
plot(x, y)
plot(x, y)
plot(x, y)
par(mar = c(2, 2, 2, 2))
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y)
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
example("points")
plot(x, y, pch = 20)
x< rnorm(100)
hist (x)
y<- rnorm(100)
plot(x, y)
plot(x, y, pch = 20)
x< rnorm(100)
hist (x)
y<- rnorm(100)
plot(x, y)
x<- rnorm(100)
hist (x)
y<- rnorm(100)
plot(x, y)
plot(x, y, pch = 20)
legend("topleft", legend = "Data", pch = 20)
fit(lm(y ~ x))
fit<-lm(y ~ x))
fit<-lm(y ~ x)
abline(fit)
abline(fit, lmd = 3)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "weight", ylab = "height", main = "scatterplot", pch = 20)
plot(x, y, xlab = "weight", ylab = "height", main = "scatterplot", pch = 20)
fit<-lm(y ~ x)
abline(fit, lwd = 3, col = "red")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot (x, y, pch = 20)
plot (x, y, pch = 19)
par ("mar")
par(mar = c(2,2,1,1))
plot(x, y, pch = 20)
plot(x, z, pch20)
plot(x, z, pch = 20)
par(mar = c(4, 4, 2, 2))
plot(x, z, pch = 20)
par(mfcol = c(2, 2))
plot(x,y)
plot(x,z)
plot(z,x)
plot(z,y)
x <- = rnorm(100)
x <-  rnorm(100)
y<- x + rnorm(100)
g <- gl(2, 50)
g<- gl(2, 50, labels = c("Males", "Females"))
str(g)
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
g<- gl(2, 50, labels = c("Male", "Female"))
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
points(x[g == "Female"], y[g == "Female"], col = "blue", pch = 19)
?Devies
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
tital(main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.off()
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
summary(pollution)
head(pollution)
dim(pollution)
pm25(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
run(ppm)
rug(ppm)
low
high
hist(ppm, col = "green", )
hist(ppm, col = "green", break = 100)
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = 12, col = "magenta", lwd = 4)
abline(v = mediam(ppm), col = "magenta", lwd = 4)
abline(v = median(ppm), col = "magenta", lwd = 4)
pollution
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot()
barplot(col = "wheat")
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
pm25 ~ x
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1, mar = c(4, 4, 2, 1)))
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution[region == "east"])
subset(pollution[region == "east"])
subset(pollution$region[pollution$region == "east"])
subset(pollution$region[region == "east"])
subset(pollution[region == "east"])
east <- subset(pollution, region =="east")
east
head(east)
hist(pm25, col = "green")
hist(east, col = "green")
hist(east$pm25, col= "green")
hist(subset(pollution[region == "west"])$pm25, col = "green")
hist(subset(pollution[region == "west"])$pm25, col = "green")
subset(pollution[region == "west"])
hist(subset(pollution,region == "west")$pm25, col = "green")
pollution
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollutionpm25))
plot(pollution$latitude, pollution$pm25))
plot(pollution$latitude, pollution$pm25, col = pollution$region))
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
wets <- subset(pollution, region =="west")
west <- subset(pollution, region =="west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region =="east")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, waiting)
dataset(faithful)
with(faithful, plot(eruptions, waiting))
title = "Old Faithful Geyser data"
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist)
)
mean(cars$speed), max(cars$dist), "SWIRL rules!"
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
summarize(state$region)
summary(state$region)
table(state$region)
xyplot(Life.Exp ~ Invoice | region, data == "state", c(4, 1) )
xyplot(Life.Exp ~ Invoice | region, data == state$Income, c(4, 1) )
xyplot(Life.Exp ~ Invoice | region, data = state, c(4, 1) )
xyplot(Life.Exp ~ Invoice | region, data = state, layout = c(4, 1) )
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1) )
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2) )
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
airquality
head(airquality)
range(airquality$Ozone, na.rm = "TRUE")
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone ~ Month | airquality)
boxplot(Ozone ~ Month , airquality)
swirl()
library(swirl)
ls()
swirl()
1
2
swirl()
library(swirl)
rm(list = ls())
swirl()
